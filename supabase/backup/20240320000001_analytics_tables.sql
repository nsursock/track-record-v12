-- Create browser_info table
CREATE TABLE "public"."browser_info" (
    "id" bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    "session_id" text,
    "browser_name" text NOT NULL,
    "browser_version" text,
    "engine_name" text,
    "engine_version" text,
    "is_mobile" boolean DEFAULT false,
    "is_tablet" boolean DEFAULT false,
    "is_desktop" boolean DEFAULT true,
    "created_at" timestamp with time zone NOT NULL DEFAULT now(),
    CONSTRAINT "browser_info_pkey" PRIMARY KEY ("id")
);

-- Create device_info table
CREATE TABLE "public"."device_info" (
    "id" bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    "session_id" text,
    "device_type" text NOT NULL,
    "device_vendor" text,
    "device_model" text,
    "screen_width" integer,
    "screen_height" integer,
    "viewport_width" integer,
    "viewport_height" integer,
    "pixel_ratio" numeric(3,2),
    "created_at" timestamp with time zone NOT NULL DEFAULT now(),
    CONSTRAINT "device_info_pkey" PRIMARY KEY ("id")
);

-- Create events table
CREATE TABLE "public"."events" (
    "id" bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    "session_id" text,
    "visitor_id" text,
    "event_name" text NOT NULL,
    "event_category" text,
    "event_action" text,
    "event_label" text,
    "event_value" integer,
    "custom_properties" jsonb,
    "occurred_at" timestamp with time zone NOT NULL,
    CONSTRAINT "events_pkey" PRIMARY KEY ("id")
);

-- Create location_info table
CREATE TABLE "public"."location_info" (
    "id" bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    "session_id" text,
    "ip_address" inet,
    "country_code" text,
    "country_name" text,
    "region_code" text,
    "region_name" text,
    "city" text,
    "timezone" text,
    "latitude" numeric(10,8),
    "longitude" numeric(11,8),
    "created_at" timestamp with time zone NOT NULL DEFAULT now(),
    CONSTRAINT "location_info_pkey" PRIMARY KEY ("id")
);

-- Create os_info table
CREATE TABLE "public"."os_info" (
    "id" bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    "session_id" text,
    "os_name" text NOT NULL,
    "os_version" text,
    "architecture" text,
    "created_at" timestamp with time zone NOT NULL DEFAULT now(),
    CONSTRAINT "os_info_pkey" PRIMARY KEY ("id")
);

-- Create pageviews table
CREATE TABLE "public"."pageviews" (
    "id" bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    "session_id" text,
    "visitor_id" text,
    "page_path" text NOT NULL,
    "referrer" text,
    "duration" integer,
    "viewed_at" timestamp with time zone NOT NULL,
    CONSTRAINT "pageviews_pkey" PRIMARY KEY ("id")
);

-- Create sessions table
CREATE TABLE "public"."sessions" (
    "id" text NOT NULL,
    "visitor_id" text,
    "entry_page" text NOT NULL,
    "referrer_source" text,
    "referrer_medium" text,
    "utm_source" text,
    "utm_medium" text,
    "utm_campaign" text,
    "utm_term" text,
    "utm_content" text,
    "started_at" timestamp with time zone NOT NULL,
    "last_seen_at" timestamp with time zone NOT NULL,
    CONSTRAINT "sessions_pkey" PRIMARY KEY ("id")
);

-- Create visitors table
CREATE TABLE "public"."visitors" (
    "visitor_id" text NOT NULL,
    "first_seen_at" timestamp with time zone NOT NULL,
    "last_seen_at" timestamp with time zone NOT NULL,
    CONSTRAINT "visitors_pkey" PRIMARY KEY ("visitor_id")
);

-- Add foreign key constraints
ALTER TABLE "public"."browser_info" ADD CONSTRAINT "browser_info_session_id_fkey" FOREIGN KEY (session_id) REFERENCES sessions(id) ON DELETE CASCADE;
ALTER TABLE "public"."device_info" ADD CONSTRAINT "device_info_session_id_fkey" FOREIGN KEY (session_id) REFERENCES sessions(id) ON DELETE CASCADE;
ALTER TABLE "public"."events" ADD CONSTRAINT "events_session_id_fkey" FOREIGN KEY (session_id) REFERENCES sessions(id) ON DELETE CASCADE;
ALTER TABLE "public"."events" ADD CONSTRAINT "events_visitor_id_fkey" FOREIGN KEY (visitor_id) REFERENCES visitors(visitor_id) ON DELETE CASCADE;
ALTER TABLE "public"."location_info" ADD CONSTRAINT "location_info_session_id_fkey" FOREIGN KEY (session_id) REFERENCES sessions(id) ON DELETE CASCADE;
ALTER TABLE "public"."os_info" ADD CONSTRAINT "os_info_session_id_fkey" FOREIGN KEY (session_id) REFERENCES sessions(id) ON DELETE CASCADE;
ALTER TABLE "public"."pageviews" ADD CONSTRAINT "pageviews_session_id_fkey" FOREIGN KEY (session_id) REFERENCES sessions(id) ON DELETE CASCADE;
ALTER TABLE "public"."pageviews" ADD CONSTRAINT "pageviews_visitor_id_fkey" FOREIGN KEY (visitor_id) REFERENCES visitors(visitor_id) ON DELETE CASCADE;
ALTER TABLE "public"."sessions" ADD CONSTRAINT "sessions_visitor_id_fkey" FOREIGN KEY (visitor_id) REFERENCES visitors(visitor_id) ON DELETE CASCADE;

-- Add RLS policies for analytics tables
CREATE POLICY "Service role can manage analytics"
ON "public"."browser_info"
AS PERMISSIVE
FOR ALL
TO service_role
USING (true);

CREATE POLICY "Service role can manage analytics"
ON "public"."device_info"
AS PERMISSIVE
FOR ALL
TO service_role
USING (true);

CREATE POLICY "Service role can manage analytics"
ON "public"."events"
AS PERMISSIVE
FOR ALL
TO service_role
USING (true);

CREATE POLICY "Service role can manage analytics"
ON "public"."location_info"
AS PERMISSIVE
FOR ALL
TO service_role
USING (true);

CREATE POLICY "Service role can manage analytics"
ON "public"."os_info"
AS PERMISSIVE
FOR ALL
TO service_role
USING (true);

CREATE POLICY "Service role can manage analytics"
ON "public"."pageviews"
AS PERMISSIVE
FOR ALL
TO service_role
USING (true);

CREATE POLICY "Service role can manage analytics"
ON "public"."sessions"
AS PERMISSIVE
FOR ALL
TO service_role
USING (true);

CREATE POLICY "Service role can manage analytics"
ON "public"."visitors"
AS PERMISSIVE
FOR ALL
TO service_role
USING (true);

-- Grant permissions
GRANT ALL ON ALL TABLES IN SCHEMA "public" TO service_role; 