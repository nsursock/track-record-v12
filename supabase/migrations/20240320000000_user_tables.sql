-- Create users table
CREATE TABLE "public"."users" (
    "id" uuid NOT NULL,
    "email" text NOT NULL,
    "handle" text UNIQUE,
    "role" text NOT NULL DEFAULT 'user' CHECK (role IN ('user', 'admin')),
    "first_name" text NOT NULL,
    "last_name" text NOT NULL,
    "country" text,
    "city" text,
    "date_of_birth" date,
    "phone_number" text,
    "gender" text,
    "profile_picture_url" text,
    "website_url" text,
    "created_at" timestamp with time zone NOT NULL DEFAULT timezone('utc'::text, now()),
    "updated_at" timestamp with time zone NOT NULL DEFAULT timezone('utc'::text, now()),
    CONSTRAINT "users_pkey" PRIMARY KEY ("id"),
    CONSTRAINT "users_email_key" UNIQUE ("email"),
    CONSTRAINT "users_id_fkey" FOREIGN KEY ("id") REFERENCES auth.users ("id") ON DELETE CASCADE
);

-- Create social_handles table
CREATE TABLE "public"."social_handles" (
    "id" bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    "user_id" uuid NOT NULL,
    "platform" text NOT NULL,
    "handle" text NOT NULL,
    "url" text,
    "is_public" boolean NOT NULL DEFAULT true,
    "created_at" timestamp with time zone NOT NULL DEFAULT timezone('utc'::text, now()),
    "updated_at" timestamp with time zone NOT NULL DEFAULT timezone('utc'::text, now()),
    CONSTRAINT "social_handles_pkey" PRIMARY KEY ("id"),
    CONSTRAINT "social_handles_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES users("id") ON DELETE CASCADE,
    CONSTRAINT "social_handles_user_platform_unique" UNIQUE ("user_id", "platform")
);

-- Add comments
COMMENT ON TABLE "public"."users" IS 'User profiles and authentication data';
COMMENT ON COLUMN "public"."users"."role" IS 'User role: user or admin';
COMMENT ON COLUMN "public"."users"."handle" IS 'Unique user handle/username';
COMMENT ON COLUMN "public"."users"."profile_picture_url" IS 'URL to user profile picture (synced with auth.users.avatar_url)';
COMMENT ON COLUMN "public"."users"."website_url" IS 'User personal website URL';
COMMENT ON TABLE "public"."social_handles" IS 'User social media handles and URLs';
COMMENT ON COLUMN "public"."social_handles"."platform" IS 'Social media platform or service name';
COMMENT ON COLUMN "public"."social_handles"."handle" IS 'Username or handle on the platform';
COMMENT ON COLUMN "public"."social_handles"."url" IS 'Full URL to the profile (optional)';
COMMENT ON COLUMN "public"."social_handles"."is_public" IS 'Whether this handle is visible to other users';

-- Create trigger to sync avatar_url with auth.users
CREATE OR REPLACE FUNCTION sync_avatar_url()
RETURNS TRIGGER AS $$
BEGIN
    UPDATE auth.users
    SET avatar_url = NEW.profile_picture_url
    WHERE id = NEW.id;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

CREATE TRIGGER sync_avatar_url_trigger
    AFTER UPDATE OF profile_picture_url ON public.users
    FOR EACH ROW
    WHEN (OLD.profile_picture_url IS DISTINCT FROM NEW.profile_picture_url)
    EXECUTE FUNCTION sync_avatar_url();

-- Add RLS policies
CREATE POLICY "Users can update own profile"
ON "public"."users"
AS PERMISSIVE
FOR UPDATE
TO public
USING ((auth.uid() = id));

CREATE POLICY "Users can view own profile"
ON "public"."users"
AS PERMISSIVE
FOR SELECT
TO public
USING ((auth.uid() = id));

CREATE POLICY "Users can manage own social handles"
ON "public"."social_handles"
AS PERMISSIVE
FOR ALL
TO public
USING ((auth.uid() = user_id));

CREATE POLICY "Anyone can view public social handles"
ON "public"."social_handles"
AS PERMISSIVE
FOR SELECT
TO public
USING (is_public = true);

-- Grant permissions
GRANT ALL ON ALL TABLES IN SCHEMA "public" TO anon, authenticated, service_role; 