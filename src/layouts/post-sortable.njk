---
layout: post.njk
---

{{ content | safe }}

<style>
.sortable-table {
  width: 100%;
  border-collapse: collapse;
  margin: 2rem 0;
}

.sortable-table th {
  background-color: #f8f9fa;
  padding: 12px 8px;
  text-align: left;
  border-bottom: 2px solid #dee2e6;
  cursor: pointer;
  user-select: none;
  position: relative;
  font-weight: 600;
  transition: background-color 0.2s ease;
}

.sortable-table th:hover {
  background-color: #e9ecef;
}

.sortable-table th.sorted-asc::after {
  content: ' ▲';
  position: absolute;
  right: 8px;
  color: #007bff;
  font-size: 0.8em;
}

.sortable-table th.sorted-desc::after {
  content: ' ▼';
  position: absolute;
  right: 8px;
  color: #007bff;
  font-size: 0.8em;
}

.sortable-table td {
  padding: 10px 8px;
  border-bottom: 1px solid #dee2e6;
  vertical-align: top;
}

.sortable-table tbody tr:nth-child(even) {
  background-color: #f8f9fa;
}

.sortable-table tbody tr:hover {
  background-color: #e3f2fd;
}

/* Auto-style specific table content based on patterns */
.sortable-table td:nth-child(n+3):nth-child(-n+11) {
  text-align: center;
  font-weight: 500;
}

.sortable-table td:last-child {
  font-weight: bold;
  color: #007bff;
  text-align: center;
}

.sortable-table td:first-child {
  font-family: monospace;
  font-size: 0.85em;
  color: #666;
}

.sortable-table td:nth-child(2) {
  max-width: 300px;
  font-size: 0.9em;
}

@media (max-width: 768px) {
  .sortable-table {
    font-size: 0.8em;
  }
  
  .sortable-table th,
  .sortable-table td {
    padding: 6px 4px;
  }
  
  .sortable-table td:nth-child(2) {
    max-width: 200px;
  }
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Find all tables and make them sortable
  const tables = document.querySelectorAll('table');
  
  tables.forEach(table => {
    makeSortable(table);
  });
  
  function makeSortable(table) {
    // Add sortable class for styling
    table.classList.add('sortable-table');
    
    // Get headers
    const headers = table.querySelectorAll('th');
    if (headers.length === 0) return;
    
    // Add click handlers to headers
    headers.forEach((header, index) => {
      header.style.cursor = 'pointer';
      header.addEventListener('click', () => sortTable(table, index, header));
    });
  }
  
  function sortTable(table, columnIndex, headerElement) {
    const tbody = table.querySelector('tbody');
    if (!tbody) return;
    
    const rows = Array.from(tbody.querySelectorAll('tr'));
    
    // Determine current sort direction
    const currentDirection = headerElement.classList.contains('sorted-asc') ? 'desc' : 'asc';
    
    // Clear all sort indicators
    table.querySelectorAll('th').forEach(th => {
      th.classList.remove('sorted-asc', 'sorted-desc');
    });
    
    // Add sort indicator to current header
    headerElement.classList.add(currentDirection === 'asc' ? 'sorted-asc' : 'sorted-desc');
    
    // Sort rows
    rows.sort((a, b) => {
      const aCell = a.cells[columnIndex];
      const bCell = b.cells[columnIndex];
      
      if (!aCell || !bCell) return 0;
      
      let aValue = aCell.textContent.trim();
      let bValue = bCell.textContent.trim();
      
      // Detect if values are numeric (for ratings, scores, etc.)
      const aNum = parseFloat(aValue.replace(/[^\d.-]/g, ''));
      const bNum = parseFloat(bValue.replace(/[^\d.-]/g, ''));
      
      if (!isNaN(aNum) && !isNaN(bNum)) {
        // Numeric comparison
        const result = aNum - bNum;
        return currentDirection === 'asc' ? result : -result;
      } else {
        // String comparison
        aValue = aValue.toLowerCase();
        bValue = bValue.toLowerCase();
        
        if (aValue < bValue) return currentDirection === 'asc' ? -1 : 1;
        if (aValue > bValue) return currentDirection === 'asc' ? 1 : -1;
        return 0;
      }
    });
    
    // Re-append sorted rows
    tbody.innerHTML = '';
    rows.forEach(row => tbody.appendChild(row));
  }
});
</script> 