---
layout: base
eleventyComputed:
  meta:
    title: "Directory - {{ site.title }}"
    description: "Connect with members of our community"
eleventyNavigation:
  key: Directory
  order: 4
---

<section class="min-h-screen bg-base-100 py-20" x-data="dataDirectory()">

    <!-- Hero Section -->
    {# <div class="relative py-16 sm:py-20">
        <div class="container mx-auto px-4 sm:px-8 max-w-7xl">
            <div class="text-center mb-12">
                <div class="mb-8 flex justify-center">
                    <span class="icon-[tabler--users] size-20 text-primary"></span>
                </div>
                <h1 class="text-4xl sm:text-5xl md:text-6xl font-bold text-base-content mb-4">Member Directory</h1>
                <p class="text-xl text-primary mb-6">Connect with our community of deep listeners</p>
                <p class="text-base-content/80 text-lg max-w-3xl mx-auto leading-relaxed">
          Discover fellow philosophers, musicians, and thinkers who share your passion for the deeper meanings in music.
        </p>
            </div>

            <!-- Search and Filter -->
            <div class="max-w-2xl mx-auto mb-8">
                <div class="flex flex-col sm:flex-row gap-4">
                    <div class="flex-1">
                        <input 
              type="text" 
              placeholder="Search members..." 
              class="input input-bordered w-full bg-base-100 border-primary/20"
              x-model="searchQuery"
              @input="filterMembers()"
            >
                    </div>
                    <div class="flex gap-2">
                        <select class="select select-bordered bg-base-100 border-primary/20" x-model="selectedRole" @change="filterMembers()">
                            <option value="">All Roles</option>
                            <option value="philosopher">Philosopher</option>
                            <option value="musician">Musician</option>
                            <option value="critic">Critic</option>
                            <option value="listener">Deep Listener</option>
                        </select>
                        <button class="btn btn-primary" @click="loadMembers()">
                            <span class="icon-[tabler--refresh] size-4"></span>
                        </button>
                    </div>
                </div>
            </div>

            <!-- Member Count -->
            <div class="text-center mb-8">
                <div class="stats shadow bg-base-200">
                    <div class="stat">
                        <div class="stat-title">Total Members</div>
                        <div class="stat-value text-primary" x-text="filteredMembers.length"></div>
                        <div class="stat-desc">Growing community</div>
                    </div>
                    <div class="stat">
                        <div class="stat-title">Active This Month</div>
                        <div class="stat-value text-secondary" x-text="activeMembers"></div>
                        <div class="stat-desc">Recent activity</div>
                    </div>
                </div>
            </div>
        </div>
    </div> #}

    <!-- Container for centered cards -->
    <div class="container mx-auto px-4 py-8 max-w-7xl">
        <div class="grid grid-cols-1 xl:grid-cols-12 gap-8 h-[calc(100vh-8rem)]">

            <!-- Mobile header -->
            <div class="xl:hidden col-span-full">
                <div class="card bg-base-200 shadow-lg">
                    <div class="card-body p-4">
                        <div class="flex items-center justify-between">
                            <button x-show="showProfile" @click="showListing = true; showProfile = false" 
                      class="btn btn-ghost btn-sm">
                                <span class="icon-[tabler--arrow-left] w-5 h-5 mr-2"></span>
                Back to Directory
              </button>
                            <h1 class="text-lg font-semibold text-base-content">
                                <span x-show="!showProfile">Directory</span>
                                <span x-show="showProfile" x-text="selected.first_name + ' ' + selected.last_name"></span>
                            </h1>
                            <div></div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Profile Card -->
            <div class="card bg-base-100 shadow-xl border border-base-300 overflow-hidden xl:col-span-9"
                 x-show="(isMobile && showProfile) || !isMobile">
                <div class="card-body p-0 h-full overflow-hidden">

                    <!-- Main Profile Area -->
                    <main class="relative z-0 flex-1 overflow-y-auto focus:outline-none h-full">

                    <!-- Profile Content -->
                    <article class="max-w-5xl mx-auto" :class="isFetching && 'opacity-50 animate-pulse'">

                        <!-- Cover Image -->
                        <div class="h-48 lg:h-64 relative overflow-hidden bg-gradient-to-r from-primary/20 to-secondary/20">
                            <template x-if="selected.cover_url">
                                <img class="h-full w-full object-cover" 
                     :src="selected.cover_url" 
                     alt="Cover image">
                            </template>
                        </div>

                        <!-- Profile Header -->
                        <div class="px-4 sm:px-6 lg:px-8">
                            <div class="flex flex-col items-center -mt-16 sm:-mt-20">

                                <!-- Avatar -->
                                <div class="avatar mb-4">
                                    <div class="w-24 h-24 sm:w-32 sm:h-32 rounded-box ring-4 ring-base-100 bg-base-200">
                                        <template x-if="selected.avatar_url">
                                            <img :src="selected.avatar_url" :alt="selected.first_name + ' ' + selected.last_name">
                                        </template>
                                        <template x-if="!selected.avatar_url">
                                            <div class="flex items-center justify-center h-full text-4xl sm:text-5xl font-medium text-base-content/80">
                                                <span x-text="(selected.first_name?.[0] || '') + (selected.last_name?.[0] || '')"></span>
                                            </div>
                                        </template>
                                    </div>
                                </div>

                                <!-- Name & Title -->
                                <div class="text-center mb-4">
                                    <h1 class="text-2xl font-bold text-base-content">
                                        <span x-text="selected.first_name + ' ' + selected.last_name"></span>
                                    </h1>
                                    <p class="text-base-content/70" x-text="selected.title"></p>
                                    <div class="flex items-center justify-center mt-2 text-sm text-base-content/60">
                                        <span class="icon-[tabler--map-pin] w-4 h-4 mr-1"></span>
                                        <span x-text="selected.city + ', ' + selected.country"></span>
                                    </div>
                                </div>

                                <!-- Action Buttons -->
                                {# <div class="flex space-x-2" 
                     x-show="$store.auth.user?.email !== selected.email">
                  <button @click="handleConnect(selected.email)" 
                          class="btn btn-primary btn-sm">
                    <span class="icon-[tabler--user-plus] w-4 h-4 mr-2"></span>
                    Connect
                  </button>
                  <button @click="openContacts = !openContacts" 
                          class="btn btn-outline btn-sm">
                    <span class="icon-[tabler--message] w-4 h-4 mr-2"></span>
                    Message
                  </button>
                  <div class="dropdown dropdown-end">
                    <button class="btn btn-ghost btn-sm" tabindex="0">
                      <span class="icon-[tabler--dots-vertical] w-4 h-4"></span>
                    </button>
                    <ul class="dropdown-content menu bg-base-200 rounded-box z-[1] w-52 p-2 shadow-lg">
                      <li><a><span class="icon-[tabler--flag] w-4 h-4 mr-2"></span>Report</a></li>
                      <li><a><span class="icon-[tabler--user-x] w-4 h-4 mr-2"></span>Block</a></li>
                    </ul>
                  </div>
                </div> #}
                            </div>
                        </div>

                        <!-- Navigation Tabs -->
                        <div class="mt-6">
                            <div class="px-4 sm:px-6 lg:px-8">
                                
                                <!-- Mobile Advanced Select -->
                                <div class="block sm:hidden mb-4">
                                    <select
                                        id="mobile-tab-select"
                                        data-select='{
                                            "placeholder": "Select tab...",
                                            "toggleTag": "<button type=\"button\" aria-expanded=\"false\"></button>",
                                            "toggleClasses": "advance-select-toggle advance-select-md select-disabled:pointer-events-none select-disabled:opacity-40",
                                            "dropdownClasses": "advance-select-menu",
                                            "optionClasses": "advance-select-option selected:select-active",
                                            "optionTemplate": "<div class=\"flex items-center gap-3 w-full\"><span class=\"icon-placeholder\"></span><span data-title></span><span class=\"icon-[tabler--check] shrink-0 size-4 text-primary hidden selected:block ml-auto\"></span></div>",
                                            "extraMarkup": "<span class=\"icon-[tabler--caret-up-down] shrink-0 size-4 text-base-content absolute top-1/2 end-3 -translate-y-1/2\"></span>"
                                        }'
                                        class="hidden"
                                    >
                                        <option value="profile-tab-item-1" data-icon="icon-[tabler--user]">Profile</option>
                                        <option value="profile-tab-item-2" data-icon="icon-[tabler--users]" x-text="`Friends (${numFriends})`">Friends</option>
                                        <option value="profile-tab-item-3" data-icon="icon-[tabler--activity]">Activity</option>
                                        <option value="profile-tab-item-4" data-icon="icon-[tabler--photo]">Media</option>
                                        <option value="profile-tab-item-5" data-icon="icon-[tabler--settings]">Settings</option>
                                    </select>
                                </div>

                                <!-- Desktop Tabs -->
                                <nav class="tabs tabs-bordered tabs-sm sm:tabs-md hidden sm:flex" aria-label="Tabs" role="tablist" aria-orientation="horizontal">
                                    <button type="button" class="tab active-tab:tab-active active" 
                                            id="profile-tab-item-1" data-tab="#profile-tab-1" 
                                            aria-controls="profile-tab-1" role="tab" aria-selected="true">
                                        <span class="icon-[tabler--user] w-4 h-4 mr-2"></span>
                                        <span class="hidden sm:inline">Profile</span>
                                    </button>
                                    {# <button type="button" class="tab active-tab:tab-active" 
                                            id="profile-tab-item-2" data-tab="#profile-tab-2" 
                                            aria-controls="profile-tab-2" role="tab" aria-selected="false">
                                        <span class="icon-[tabler--users] w-4 h-4 mr-2"></span>
                                        <span class="hidden sm:inline">Friends</span>
                                        <span class="badge badge-primary badge-sm ml-1" x-text="numFriends"></span>
                                    </button> #}
                                    <button type="button" class="tab active-tab:tab-active" 
                                            id="profile-tab-item-3" data-tab="#profile-tab-3" 
                                            aria-controls="profile-tab-3" role="tab" aria-selected="false">
                                        <span class="icon-[tabler--activity] w-4 h-4 mr-2"></span>
                                        <span class="hidden sm:inline">Activity</span>
                                    </button>
                                    <button type="button" class="tab active-tab:tab-active" 
                                            id="profile-tab-item-4" data-tab="#profile-tab-4" 
                                            aria-controls="profile-tab-4" role="tab" aria-selected="false">
                                        <span class="icon-[tabler--photo] w-4 h-4 mr-2"></span>
                                        <span class="hidden sm:inline">Media</span>
                                    </button>
                                    <button type="button" class="tab active-tab:tab-active" 
                                            id="profile-tab-item-5" data-tab="#profile-tab-5" 
                                            aria-controls="profile-tab-5" role="tab" aria-selected="false">
                                        <span class="icon-[tabler--settings] w-4 h-4 mr-2"></span>
                                        <span class="hidden sm:inline">Settings</span>
                                    </button>
                                </nav>
                            </div>
                        </div>

                        <!-- Tab Content -->
                        <div class="px-4 sm:px-6 lg:px-8 py-8">

                            <!-- Profile Tab -->
                            <div id="profile-tab-1" role="tabpanel" aria-labelledby="profile-tab-item-1" class="space-y-8">

                                <!-- About Section -->
                                <div class="card bg-base-200">
                                    <div class="card-body">
                                        <h3 class="text-lg font-semibold text-base-content mb-4">About</h3>
                                        <p class="text-base-content/80" x-text="selected.description || 'No description available.'"></p>
                                    </div>
                                </div>

                                <!-- Details Grid -->
                                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">

                                    <!-- Contact Info -->
                                    <div class="card bg-base-200">
                                        <div class="card-body">
                                            <h4 class="font-semibold text-base-content mb-3">Contact</h4>
                                            <div class="space-y-2 text-sm">
                                                <div class="flex items-center">
                                                    <span class="icon-[tabler--mail] w-4 h-4 mr-2 text-base-content/60"></span>
                                                    <span x-text="selected.email"></span>
                                                </div>
                                                <div class="flex items-center" x-show="selected.phone_number">
                                                    <span class="icon-[tabler--phone] w-4 h-4 mr-2 text-base-content/60"></span>
                                                    <span x-text="selected.phone_number"></span>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <!-- Location -->
                                    <div class="card bg-base-200">
                                        <div class="card-body">
                                            <h4 class="font-semibold text-base-content mb-3">Location</h4>
                                            <div class="space-y-2 text-sm">
                                                <div class="flex items-center">
                                                    <span class="icon-[tabler--map-pin] w-4 h-4 mr-2 text-base-content/60"></span>
                                                    <span x-text="selected.city"></span>
                                                </div>
                                                <div class="flex items-center">
                                                    <span class="icon-[tabler--world] w-4 h-4 mr-2 text-base-content/60"></span>
                                                    <span x-text="selected.country"></span>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <!-- Personal Info -->
                                    <div class="card bg-base-200">
                                        <div class="card-body">
                                            <h4 class="font-semibold text-base-content mb-3">Personal</h4>
                                            <div class="space-y-2 text-sm">
                                                <div class="flex items-center" x-show="selected.birthday">
                                                    <span class="icon-[tabler--cake] w-4 h-4 mr-2 text-base-content/60"></span>
                                                    <span x-text="formatDate(new Date(selected.birthday), 'MMMM d, y')"></span>
                                                </div>
                                                <div class="flex items-center">
                                                    <span class="icon-[tabler--calendar] w-4 h-4 mr-2 text-base-content/60"></span>
                                                    <span>Joined recently</span>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Friends Tab -->
                            {# <div id="profile-tab-2" role="tabpanel" aria-labelledby="profile-tab-item-2" class="hidden"
                                 x-data="{ friends: [] }" 
                                 x-effect="friends = generateFakeFriends()">

                                <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
                                    <template x-for="friend in friends" :key="friend.id">
                                        <div class="card bg-base-200 hover:shadow-lg transition-shadow cursor-pointer"
                                             @click="selected = friend; HSTabs.open(document.querySelector('#profile-tab-item-1'))"
                                            <div class="card-body p-4">
                                                <div class="flex items-center space-x-3">
                                                    <div class="avatar">
                                                        <div class="w-12 h-12 rounded-full bg-base-300">
                                                            <template x-if="friend.avatar_url">
                                                                <img :src="friend.avatar_url" :alt="friend.first_name">
                                                            </template>
                                                            <template x-if="!friend.avatar_url">
                                                                <div class="flex items-center justify-center h-full text-sm font-medium text-base-content/80">
                                                                    <span x-text="(friend.first_name?.[0] || '') + (friend.last_name?.[0] || '')"></span>
                                                                </div>
                                                            </template>
                                                        </div>
                                                    </div>
                                                    <div class="flex-1 min-w-0">
                                                        <h4 class="font-medium text-base-content truncate" 
                                x-text="friend.first_name + ' ' + friend.last_name"></h4>
                                                        <p class="text-sm text-base-content/70 truncate" x-text="friend.title"></p>
                                                    </div>
                                                </div>
                                                <div class="flex justify-between items-center mt-3">
                                                    <span class="badge badge-primary badge-sm" x-text="friend.city"></span>
                                                    <button @click.stop="handleConnect(friend.email)" 
                                  class="btn btn-ghost btn-xs">
                                                        <span class="icon-[tabler--message] w-3 h-3"></span>
                                                    </button>
                                                </div>
                                            </div>
                                        </div>
                                    </template>
                                </div>
                            </div> #}

                            <!-- Activity Tab -->
                            <div id="profile-tab-3" role="tabpanel" aria-labelledby="profile-tab-item-3" class="hidden">
                                <div class="card bg-base-200">
                                    <div class="card-body">
                                        <h3 class="text-lg font-semibold text-base-content mb-4">Recent Activity</h3>
                                        <template x-if="fakeActivity.length">
                                            <ul class="divide-y divide-base-300">
                                                <template x-for="item in fakeActivity" :key="item.id">
                                                    <li class="flex items-center py-3">
                                                        <span :class="item.icon + ' w-5 h-5 mr-3 text-primary'" aria-hidden="true"></span>
                                                        <div class="flex-1">
                                                            <span class="text-base-content/90" x-text="item.text"></span>
                                                            <div class="text-xs text-base-content/60" x-text="item.date"></div>
                                                        </div>
                                                    </li>
                                                </template>
                                            </ul>
                                        </template>
                                        <template x-if="!fakeActivity.length">
                                            <p class="text-base-content/80">No recent activity to display.</p>
                                        </template>
                                    </div>
                                </div>
                            </div>

                            <!-- Media Tab -->
                            <div id="profile-tab-4" role="tabpanel" aria-labelledby="profile-tab-item-4" class="hidden">
                                <div class="card bg-base-200">
                                    <div class="card-body">
                                        <h3 class="text-lg font-semibold text-base-content mb-4">Media</h3>
                                        <template x-if="fakeMedia.length">
                                            <div class="grid grid-cols-2 md:grid-cols-4 gap-4">
                                                <template x-for="media in fakeMedia" :key="media.id">
                                                    <div class="rounded-box overflow-hidden bg-base-300">
                                                        <img :src="media.url" :alt="media.title" class="w-full h-28 object-cover">
                                                        <div class="p-2 text-xs text-base-content/80" x-text="media.title"></div>
                                                    </div>
                                                </template>
                                            </div>
                                        </template>
                                        <template x-if="!fakeMedia.length">
                                            <p class="text-base-content/80">No media uploaded yet.</p>
                                        </template>
                                    </div>
                                </div>
                            </div>

                            <!-- Settings Tab -->
                            <div id="profile-tab-5" role="tabpanel" aria-labelledby="profile-tab-item-5" class="hidden">
                                <div class="card bg-base-200">
                                    <div class="card-body">
                                        <h3 class="text-lg font-semibold text-base-content mb-4">Settings</h3>
                                        <template x-if="fakeSettings.length">
                                            <div class="space-y-4">
                                                <template x-for="setting in fakeSettings" :key="setting.id">
                                                    <div class="flex gap-2">
                                                        <input type="checkbox" 
                                                               class="checkbox checkbox-primary mt-2" 
                                                               :id="'setting-' + setting.id"
                                                               x-model="setting.value" 
                                                               disabled>
                                                        <label class="label-text cursor-pointer flex flex-col" :for="'setting-' + setting.id">
                                                            <span class="text-base" x-text="setting.label"></span>
                                                            <span class="text-base-content/70 text-sm" x-text="setting.description || 'Manage your notification preferences'"></span>
                                                        </label>
                                                    </div>
                                                </template>
                                            </div>
                                        </template>
                                        <template x-if="!fakeSettings.length">
                                            <p class="text-base-content/80">No settings available.</p>
                                        </template>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </article>
                    </main>
                </div>
            </div>

            <!-- Directory Card -->
            <div class="card bg-base-100 shadow-xl border border-base-300 overflow-hidden xl:col-span-3"
                 x-show="(isMobile && showListing) || !isMobile">
                <div class="card-body p-0 h-full overflow-hidden">
                    <aside class="flex-1 flex flex-col overflow-hidden h-full">

                    <!-- Sidebar Header -->
                    <div class="p-6 border-b border-base-300">
                        <h2 class="text-xl font-bold text-base-content">Directory</h2>
                        <p class="text-sm text-base-content/70 mt-1" x-show="users.length">
                            <span x-text="users.length"></span> members
            </p>

                        <!-- Search -->
                        <div class="form-control mt-4">
                            <div class="input">
                                <span class="icon-[tabler--filter] text-base-content/50 my-auto me-3 size-5 shrink-0"></span>
                                <input type="text" 
                       placeholder="Search members..." 
                       class="grow"
                       x-model="search"
                       @input="query = search">
                            </div>
                        </div>
                    </div>

                    <!-- Directory List -->
                    <nav class="flex-1 overflow-y-auto">
                        <template x-for="letter in Object.keys(getBook(query)).sort()" :key="letter">
                            <div>
                                <!-- Letter Header -->
                                <div class="sticky top-0 bg-base-200 border-b border-base-300 px-6 py-2 z-10">
                                    <h3 class="text-sm font-medium text-base-content/80" x-text="letter"></h3>
                                </div>

                                <!-- Users in this letter -->
                                <ul class="divide-y divide-base-300">
                                    <template x-for="user in getBook(query)[letter]" :key="user.id">
                                        <li @click="selected = user; showProfile = true; showListing = false; HSTabs.open(document.querySelector('#profile-tab-item-1'))"
                        class="p-4 hover:bg-base-200 cursor-pointer transition-colors"
                        :class="selected.id === user.id ? 'bg-primary/10 ' : ''">
                                            <div class="flex items-center space-x-3">
                                                <div class="avatar">
                                                    <div class="w-10 h-10 rounded-full bg-base-300">
                                                        <template x-if="user.avatar_url">
                                                            <img :src="user.avatar_url" :alt="user.first_name">
                                                        </template>
                                                        <template x-if="!user.avatar_url">
                                                            <div class="flex items-center justify-center h-full text-xs font-medium text-base-content/80">
                                                                <span x-text="(user.first_name?.[0] || '') + (user.last_name?.[0] || '')"></span>
                                                            </div>
                                                        </template>
                                                    </div>
                                                </div>
                                                <div class="flex-1 min-w-0">
                                                    <p class="text-sm font-medium text-base-content truncate" 
                             x-text="user.first_name + ' ' + user.last_name"></p>
                                                    <p class="text-xs text-base-content/70 truncate" x-text="user.title"></p>
                                                </div>
                                                <div class="flex items-center">
                                                    <div class="w-2 h-2 rounded-full bg-success" 
                               x-show="user.isOnline"
                               title="Online"></div>
                                                </div>
                                            </div>
                                        </li>
                                    </template>
                                </ul>
                            </div>
                        </template>

                        <!-- Empty State -->
                        <div x-show="Object.keys(getBook(query)).length === 0" 
                 class="text-center py-12 px-6">
                            <div class="w-16 h-16 bg-base-300 rounded-full flex items-center justify-center mx-auto mb-4">
                                <span class="icon-[tabler--users] w-8 h-8 text-base-content/50"></span>
                            </div>
                            <h3 class="text-lg font-medium text-base-content mb-2">No members found</h3>
                            <p class="text-base-content/70">Try adjusting your search query</p>
                        </div>
                    </nav>
                    </aside>
                </div>
            </div>
        </div>
    </div>
</section>

<script>
    function dataDirectory() {
        return {
            users: [],
            selected: {},
            isFetching: false,
            numFriends: 8,
            search: '',
            query: '',
            isMobile: window.innerWidth < 1280,

            showListing: true,
            showProfile: false,
            openContacts: false,
            tabs: [],

            // Generate fake data
            generateFakeUsers() {
                const firstNames = [
                    'Alex',
                    'Jordan',
                    'Taylor',
                    'Morgan',
                    'Casey',
                    'Riley',
                    'Avery',
                    'Quinn',
                    'Sage',
                    'River',
                    'Phoenix',
                    'Kai',
                    'Nova',
                    'Luna',
                    'Zara',
                    'Eden',
                    'Rowan',
                    'Skylar',
                    'Indigo',
                    'Marlowe',
                    'Emery',
                    'Blake',
                    'Cameron',
                    'Drew',
                    'Finley'
                ];
                const lastNames = [
                    'Anderson',
                    'Brown',
                    'Chen',
                    'Davis',
                    'Evans',
                    'Foster',
                    'Garcia',
                    'Harris',
                    'Johnson',
                    'Kim',
                    'Lee',
                    'Martinez',
                    'Nelson',
                    'Parker',
                    'Rodriguez',
                    'Smith',
                    'Taylor',
                    'Wilson',
                    'Young',
                    'Zhang'
                ];
                const cities = [
                    'New York',
                    'San Francisco',
                    'London',
                    'Berlin',
                    'Tokyo',
                    'Paris',
                    'Toronto',
                    'Sydney',
                    'Amsterdam',
                    'Barcelona',
                    'Seoul',
                    'Singapore',
                    'Stockholm',
                    'Copenhagen',
                    'Vienna',
                    'Prague',
                    'Dublin',
                    'Melbourne',
                    'Vancouver',
                    'Montreal'
                ];
                const countries = [
                    'USA',
                    'USA',
                    'UK',
                    'Germany',
                    'Japan',
                    'France',
                    'Canada',
                    'Australia',
                    'Netherlands',
                    'Spain',
                    'South Korea',
                    'Singapore',
                    'Sweden',
                    'Denmark',
                    'Austria',
                    'Czech Republic',
                    'Ireland',
                    'Australia',
                    'Canada',
                    'Canada'
                ];
                const titles = [
                    'Music Producer',
                    'Philosophy Student',
                    'Sound Engineer',
                    'Digital Artist',
                    'Music Journalist',
                    'Audio Designer',
                    'Creative Director',
                    'Podcast Host',
                    'Music Therapist',
                    'Composer',
                    'DJ',
                    'Music Teacher',
                    'Audio Engineer',
                    'Content Creator',
                    'Music Blogger',
                    'Event Organizer',
                    'Musician',
                    'Record Label Owner',
                    'Music Curator',
                    'Audio Technician'
                ];
                const descriptions = [
                    'Passionate about the intersection of music and philosophy, exploring how sound shapes our understanding of reality.',
                    'Creating immersive soundscapes that bridge the gap between traditional composition and modern technology.',
                    'Dedicated to preserving and promoting jazz heritage while pushing the boundaries of contemporary expression.',
                    'Philosophy grad turned electronic music producer, finding meaning in the spaces between beats.',
                    'Sound engineer with a love for analog warmth and digital precision.',
                    'Exploring the therapeutic potential of music through research and practice.',
                    'Building communities around shared musical experiences and philosophical discourse.',
                    'Documenting the evolution of underground music scenes and their cultural impact.',
                    'Teaching the next generation of musicians while learning from their fresh perspectives.',
                    'Curating sonic experiences that challenge preconceptions and inspire growth.'
                ];

                const users = [];
                for (let i = 0; i < 30; i++) {
                    const cityIndex = Math.floor(Math.random() * cities.length);
                    const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];
                    const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];

                    users.push({
                        id: i + 1,
                        first_name: firstName,
                        last_name: lastName,
                        name: firstName + ' ' + lastName,
                        title: titles[Math.floor(Math.random() * titles.length)],
                        city: cities[cityIndex],
                        country: countries[cityIndex],
                        email: `${firstName.toLowerCase()}.${lastName.toLowerCase()}@example.com`,
                        phone_number: Math.random() > 0.5
                            ? `+1-555-${Math.floor(Math.random() * 9000) + 1000}`
                            : null,
                        avatar_url: Math.random() > 0.3
                            ? `https://i.pravatar.cc/150?img=${Math.floor(Math.random() * 70) + 1}`
                            : null,
                        cover_url: Math.random() > 0.7
                            ? `https://picsum.photos/800/200?random=${i + 1}`
                            : null,
                        description: descriptions[Math.floor(Math.random() * descriptions.length)],
                        birthday: new Date(Date.now() - Math.floor(Math.random() * 40 * 365 * 24 * 60 * 60 * 1000) - (18 * 365 * 24 * 60 * 60 * 1000)),
                        isOnline: Math.random() > 0.6,
                        full_name: firstName + ' ' + lastName
                    });
                }
                return users;
            },

            generateFakeFriends() {
                return this
                    .users
                    .filter(u => u.id !== this.selected.id)
                    .slice(0, 8);
            },

            handleConnect(email) {
                console.log('Connect clicked for:', email);
                // TODO: Implement connection logic
            },

            formatDate(date, format) {
                if (!date) 
                    return 'N/A';
                const d = new Date(date);
                if (format === 'MMMM d, y') {
                    return d.toLocaleDateString('en-US', {
                        year: 'numeric',
                        month: 'long',
                        day: 'numeric'
                    });
                }
                return d.toLocaleDateString();
            },

            getBook(search) {
                const filtered = this
                    .users
                    .filter((u) => !search || u.first_name.toLowerCase().includes(search.toLowerCase()) || u.last_name.toLowerCase().includes(search.toLowerCase()) || u.title.toLowerCase().includes(search.toLowerCase()));

                return filtered
                    .map((o) => ({
                        ...o,
                        key: o
                            .last_name[0]
                            .toUpperCase()
                    }))
                    .reduce((hash, obj) => ({
                        ...hash,
                        [obj.key]: (hash[obj.key] || []).concat(obj)
                    }), {});
            },

            async init() {
                this.isFetching = true;

                // Add resize handler for mobile detection
                window.addEventListener('resize', () => {
                    this.isMobile = window.innerWidth < 1280;
                });

                // Generate fake users for testing
                this.users = this.generateFakeUsers();

                // Select first user by default
                if (this.users.length > 0) {
                    this.selected = this.users[0];
                }

                // Generate fake activity and media
                this.fakeActivity = [
                    {
                        id: 1,
                        type: 'like',
                        text: 'Liked a post by Taylor Smith',
                        date: '2 hours ago',
                        icon: 'icon-[tabler--thumb-up]'
                    }, {
                        id: 2,
                        type: 'update',
                        text: 'Updated profile picture',
                        date: '1 day ago',
                        icon: 'icon-[tabler--photo]'
                    }, {
                        id: 3,
                        type: 'join',
                        text: 'Joined the "Music Producers" group',
                        date: '3 days ago',
                        icon: 'icon-[tabler--users-group]'
                    }, {
                        id: 4,
                        type: 'comment',
                        text: 'Commented on a discussion',
                        date: '5 days ago',
                        icon: 'icon-[tabler--message]'
                    }
                ];
                this.fakeMedia = [
                    {
                        id: 1,
                        url: 'https://picsum.photos/seed/1/200/150',
                        type: 'image',
                        title: 'Studio Session'
                    }, {
                        id: 2,
                        url: 'https://picsum.photos/seed/2/200/150',
                        type: 'image',
                        title: 'Live Performance'
                    }, {
                        id: 3,
                        url: 'https://picsum.photos/seed/3/200/150',
                        type: 'image',
                        title: 'Album Cover'
                    }, {
                        id: 4,
                        url: 'https://picsum.photos/seed/4/200/150',
                        type: 'image',
                        title: 'Podcast Recording'
                    }
                ];
                this.fakeSettings = [
                    {
                        id: 1,
                        label: 'Email Notifications',
                        value: true,
                        description: 'Receive email updates about your account activity'
                    },
                    {
                        id: 2,
                        label: 'Profile Visibility',
                        value: false,
                        description: 'Make your profile visible to other members'
                    },
                    {
                        id: 3,
                        label: 'Enable Dark Mode',
                        value: true,
                        description: 'Switch between light and dark theme'
                    }
                ];

                this.isFetching = false;
                console.log('Directory initialized with', this.users.length, 'fake users');

                // Initialize mobile tab select functionality
                this.initMobileTabSelect();
            },

            initMobileTabSelect() {
                // Wait for FlyonUI to initialize
                setTimeout(() => {
                    const mobileSelect = document.getElementById('mobile-tab-select');
                    if (mobileSelect && window.HSSelect) {
                        const selectInstance = window.HSSelect.getInstance(mobileSelect);
                        if (selectInstance) {
                            selectInstance.on('change', (value) => {
                                // Open the corresponding tab
                                const tabButton = document.getElementById(value);
                                if (tabButton && window.HSTabs) {
                                    window.HSTabs.open(tabButton);
                                }
                            });

                            // Set initial value to Profile
                            selectInstance.setValue('profile-tab-item-1');
                        }
                    }

                    // Add icons to select options using custom logic
                    this.addIconsToSelectOptions();
                }, 100);
            },

            addIconsToSelectOptions() {
                // Custom function to add icons to advanced select options
                const tryAddIcons = () => {
                    const selectDropdown = document.querySelector('#mobile-tab-select + .advance-select-toggle + .advance-select-menu');
                    if (!selectDropdown) {
                        // Try again after a short delay
                        setTimeout(tryAddIcons, 200);
                        return;
                    }
                    const options = selectDropdown.querySelectorAll('.advance-select-option');
                    const iconMap = {
                        'Profile': 'icon-[tabler--user]',
                        'Friends': 'icon-[tabler--users]', 
                        'Activity': 'icon-[tabler--activity]',
                        'Media': 'icon-[tabler--photo]',
                        'Settings': 'icon-[tabler--settings]'
                    };

                    options.forEach(option => {
                        const textSpan = option.querySelector('[data-title]');
                        const iconPlaceholder = option.querySelector('.icon-placeholder');
                        if (textSpan && iconPlaceholder) {
                            const text = textSpan.textContent.trim();
                            let iconClass;
                            
                            // Handle dynamic text matching
                            if (text === 'Profile') iconClass = iconMap['Profile'];
                            else if (text.startsWith('Friends')) iconClass = iconMap['Friends'];
                            else if (text === 'Activity') iconClass = iconMap['Activity'];
                            else if (text === 'Media') iconClass = iconMap['Media'];
                            else if (text === 'Settings') iconClass = iconMap['Settings'];
                            
                            if (iconClass) {
                                iconPlaceholder.className = `${iconClass} w-4 h-4 shrink-0`;
                            }
                        }
                    });
                };
                
                tryAddIcons();
            }
        }
    }
</script>